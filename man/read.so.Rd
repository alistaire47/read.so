% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/so.R
\name{read.so}
\alias{read.so}
\alias{read_so}
\title{Read data pasted from R printing into a data frame}
\usage{
read.so(file = clipr::read_clip(), header = TRUE, na.strings = c("NA",
  "<NA>"), stringsAsFactors = FALSE, ...)

read_so(file = clipr::read_clip(), row_names, na = c("NA", "<NA>"), ...)
}
\arguments{
\item{file}{Character. A path to a file, a connection, or literal
data (either a single string or a vector of lines). If unspecified,
reads from the clipboard.}

\item{header}{Logical. Does the data include a header row?}

\item{na.strings, na}{Character. Values to convert to \code{NA}.}

\item{stringsAsFactors}{Logical. Indicates whether to convert string columns
to factors. Passed along to \code{\link[=read.table]{read.table()}}.}

\item{...}{Passed along to \code{\link[=read.table]{read.table()}} or \code{\link[readr:read_table2]{readr::read_table2()}} by
\code{read.so} and \code{read_so}, respectively. Applied after tibble formatting
lines have been removed.}

\item{row_names}{Logical. Indicates whether the input contains a column of
row names. If missing, guesses based on the number of elements in the
header and first row. Row names are removed by \code{read_so}; to keep them,
use \code{read.so}. For row names with spaces, try \code{\link[readr:read_table]{readr::read_table()}}
or \code{\link[readr:read_fwf]{readr::read_fwf()}}.}
}
\value{
For \code{read.so} a data.frame; for \code{read_so}, a tibble.
}
\description{
\code{read.so} and \code{read_so} read data copied from R print methods into a
data.frame or tibble, respectively.
}
\details{
\code{read.so} is designed to read the print method of a data.frame back into R,
provided there are no unquoted spaces within the printing. \code{read_so} will
read the results of printing a data.frame as well, but will return a tibble.
Its more significant feature is that it will read in the results of printing
a tibble, with or without the "A tibble", type, and additional row and
column metadata lines.

The \code{file} parameter will accept a filepath or connection, but given that
these functions are built for interactive use, they are built to accept a
single string containing the data (distinguished from a filepath by the
presence of a newline) or a vector of lines, as may be generated by
\code{\link[clipr:read_clip]{clipr::read_clip()}}.
}
\examples{

lines.df <- capture.output(head(iris))

lines_tbl <- capture.output(head(tibble::as_tibble(iris)))

read.so(lines.df)

read_so(lines.df)


# Data has extra metadata lines, so normal reading fails:
\dontrun{
read.so(lines_tbl)
}

# ...but can work:
read.so::read.so(lines_tbl, comment = '<', skip = 1)

# Alternately, use the purpose-built function:
read_so(lines_tbl)

}
