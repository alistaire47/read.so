% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/str.R
\name{read.str}
\alias{read.str}
\alias{read_str}
\title{Read the results of \code{str.data.frame} back into a data frame}
\usage{
read.str(file = clipr::read_clip())

read_str(file = clipr::read_clip())
}
\arguments{
\item{file}{Character. A path to a file, a connection, or literal
data (either a single string or a vector of lines). If unspecified,
reads from the clipboard.}
}
\value{
A data frame of the class specified in the first line of input.
}
\description{
\code{read.str} and \code{read_str} read the structure printed
when \code{\link[utils:str.data.frame]{utils::str.data.frame()}} back into a data frame.
}
\details{
\code{read.str} and \code{read_str} are roughly inverses of \code{str.data.frame}, except:
\itemize{
\item \code{read.str} subsets to rows where the \code{str} results contain the complete
data for the observation,
\item attributes are dropped, and
\item list and matrix columns are unsupported.
}

Classes at the top of the \code{str} results are reassigned, so both vanilla
\code{data.frame}s and variants like \code{tbl_df} and \code{data.table} are supported.
Because class is determined by the data, \code{read_str} is merely an alias.
}
\examples{
read.str(capture.output(str(iris)))

# Resulting class is determined by input, not read.str vs. read_str
read_str(capture.output(str(tibble::as_tibble(iris))))

}
